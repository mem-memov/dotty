package vo

case class Описание() {

}

case class Утверждение(
  действие: Option[Действие] = None, 
  подробности: Map[Вопрос, Option[Ответ]] = Map.empty
) {
  def -(утверждение: Утверждение) = Утверждение(
    if (утверждение.действие == действие) None else действие, 
    (подробности.toSet diff утверждение.подробности.toSet).toMap
  )

  def +(утверждение: Утверждение) = Утверждение(
    if (утверждение.действие == действие) утверждение.действие else утверждение.действие, 
    (подробности.toSet union утверждение.подробности.toSet).toMap
  )
}

case class Действие(словосочетание: String) {
  
}

case class Вопрос(словосочетание: String) {

}

case class Ответ(словосочетание: String) {

}


//
//class Предложение {
//  val подлежащие: List[Подлежащее] = List()
//  val сказуемые: List[Сказуемое] = List()
//
//  def map(f: ЧленПредложения => ЧленПредложения): Предложение = {
//    подлежащие.map(f)
//    сказуемые.map(f)
//    this
//  }
//}
//
//trait ЧленПредложения {
//
//}
//
//class Подлежащее extends ЧленПредложения {
//  def map(f: ЧленПредложения => ЧленПредложения): Предложение = {
//    подлежащие.map(f)
//    сказуемые.map(f)
//    this
//  }
//}
//
//class Сказуемое extends ЧленПредложения {
//  def map(f: ЧленПредложения => ЧленПредложения): Предложение = {
//    подлежащие.map(f)
//    сказуемые.map(f)
//    this
//  }
//}